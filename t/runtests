#!/usr/bin/perl

# Copyright © 1998 Richard Braakman
# Copyright © 2008 Frank Lichtenheld
# Copyright © 2008, 2009 Russ Allbery
# Copyright © 2014 Niels Thykier
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, you can find it on the World Wide
# Web at http://www.gnu.org/copyleft/gpl.html, or write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

# The harness for Lintian's test suite.  For detailed information on
# the test suite layout and naming conventions, see t/tests/README.
# For more information about running tests, see
# doc/tutorial/Lintian/Tutorial/TestSuite.pod
#

use strict;
use warnings;
use autodie;
use Carp qw(confess);
use Cwd();

use Getopt::Long qw(GetOptions);
use IO::Async::Channel;
use IO::Async::Loop;
use IO::Async::Routine;
use List::MoreUtils qw(none);

use constant SUITES => qw(scripts changes debs source tests);

our ($LINTIAN_ROOT, $LINTIAN, @LINTIAN_CMD);

BEGIN {
    if (($ENV{'LINTIAN_TEST_INSTALLED'}//'no') eq 'yes') {
        $LINTIAN_ROOT = '/usr/share/lintian';
        $LINTIAN = '/usr/bin/lintian';
    } else {
        $LINTIAN_ROOT = Cwd::cwd();
        $LINTIAN = "$LINTIAN_ROOT/frontend/lintian";
    }
    $ENV{'LINTIAN_TEST_ROOT'} = $LINTIAN_ROOT;
    $ENV{'LINTIAN_FRONTEND'} = $LINTIAN;
    @LINTIAN_CMD = ($LINTIAN);

    delete $ENV{'LINTIAN_CFG'};
    delete $ENV{'LINTIAN_LAB'};
    delete($ENV{'LINTIAN_PROFILE'});
    delete($ENV{'LINTIAN_COVERAGE'});
    # Some of the tests don't cope too well with "-j" in MAKEFLAGS
    delete($ENV{'MAKEFLAGS'});
    # Ensure Lintian works without $ENV{HOME}
    delete($ENV{'HOME'});
    # Ubuntu auto-builders run pkg-mangle which messes with our
    # test packages, so ask it not to do so by default.
    $ENV{'NO_PKG_MANGLE'} = 'true'
      unless exists($ENV{'NO_PKG_MANGLE'});

    $ENV{'LC_ALL'} = 'C';

    # Set standard umask because many of the test packages rely on this
    # when creating files from the debian/rules script.
    umask(022);
}

use lib "$LINTIAN_ROOT/lib";

use Lintian::Internal::FrontendUtil qw(default_parallel);
use Lintian::Util qw(delete_dir fail parse_boolean
  rstrip slurp_entire_file touch_file);

use Test::Lintian::Harness qw(chdir_runcmd check_test_depends
  copy_template_dir fill_in_tmpl find_tests_for_tag
  read_test_desc runsystem runsystem_ok skip_reason up_to_date);

# --- Global configuration
our @DPKG_BUILDPACKAGE_CMD = (
    qw(dpkg-buildpackage -rfakeroot -us -uc -d),
    qw(-iNEVER_MATCH_ANYTHING -INEVER_MATCH_ANYTHING),
    qw(--source-option=--auto-commit),
);
our $STANDARDS_VERSION = '3.9.5';
our $ARCHITECTURE = `dpkg-architecture -qDEB_HOST_ARCH`;
our $DATE = `date -R`;
chomp($ARCHITECTURE, $DATE);

our %TEMPLATES = (
    'tests'  => ['debian/changelog', 'debian/control'],
    'debs'   => ['changelog', 'control', 'Makefile'],
    'source' => ['changelog', 'control'],
);

our $IO_LOOP = IO::Async::Loop->new;
our $OUTPUT_IS_TTY = -t STDOUT;
our %OPT;

# --- Parsed options / arguments

our $DEBUG = 0;
our $VERBOSE = 0;
our $RUNDIR;
our $TESTSET;
our $JOBS = -1;
our $DUMP_LOGS = '';
our @TESTS;
our $ACTIVE_JOBS = 0;

my ($run_all_tests, $tag, $coverage, $singletest, %suites);

parse_args();

if (-d "$TESTSET/helpers/bin") {
    # Add the test helpers to PATH
    my $tpath = Cwd::abs_path("$TESTSET/helpers/bin");
    fail "Cannot resolve $TESTSET/helpers/bin: $!" unless $tpath;
    $ENV{'PATH'} = "$tpath:$ENV{'PATH'}";
}

# --- Display output immediately
STDOUT->autoflush;

# --- Exit status for the test suite driver

# Exit codes:
# 0 - success
# 1 - one or more tests failed
# 2 - an error prevented proper running of the tests
my $status = 0;

# Tests that were skipped and why
# - $suite => $testname => $reason
my %skipped;
# Tests that failed
my @failed;

# If we don't run any tests, we'll want to warn that we couldn't find
# anything.
my $tests_run = 0;

if ($singletest && $singletest =~ s/^tag://) {
    $tag = $singletest;
    # clear singletest to avoid find a "single" test.
    $singletest = '';
} elsif ($singletest && $singletest =~ m/^suite:(.++)/) {
    my $list = $1;
    %suites = ();
    foreach my $s (split m/\s*+,\s*+/, $list) {
        $suites{$s} = 1;
    }
    # clear singletest to avoid find a "single" test.
    $singletest = '';
} else {
    # run / check all of them
    foreach my $s (SUITES) {
        $suites{$s} = 1;
    }
}

if (!$tag) {
    run_prove_tests();
}

find_tests_to_run();

if (@TESTS) {
    for my $i (0..$JOBS-1) {
        create_child($IO_LOOP, \@TESTS, $i)
          or last;
    }

    $IO_LOOP->run;
}

print_test_summary();

exit $status;

sub parse_args {
    Getopt::Long::Configure('bundling');
    GetOptions(
        'd|debug'      => \$DEBUG,
        'j|jobs:i'     => \$JOBS,
        'k|keep-going' => \$run_all_tests,
        'dump-logs!'   => \$DUMP_LOGS,
        'v|verbose'    => \$VERBOSE,
        'coverage:s'   => \$coverage,
        'help|h'       => sub {usage(0); },
    ) or usage();

    if (@ARGV < 2 || @ARGV > 3) {
        usage();
    }

    ($TESTSET, $RUNDIR, $singletest) = @ARGV;

    if (-d $RUNDIR) {
        my $abs = Cwd::abs_path($RUNDIR);
        fail("Cannot resolve $RUNDIR: $!")
          if not defined($abs);
        $RUNDIR = $abs;
    } else {
        fail("test directory $RUNDIR does not exist");
    }

    unless (-d $TESTSET) {
        fail("test set directory $TESTSET does not exist");
    }

    if (defined($coverage)) {
        my $harness_perl_switches = $ENV{'HARNESS_PERL_SWITCHES'}//'';
        # Only collect coverage for stuff that D::NYTProf and
        # Test::Pod::Coverage cannot do for us.  This makes cover use less
        # RAM in the other end.
        my @criteria = qw(statement branch condition path subroutine);
        my $coverage_arg
          = '-MDevel::Cover=-silent,1,+ignore,^(.*/)?t/scripts/.+';
        $coverage_arg .= ',-coverage,' . join(',-coverage,', @criteria);
        $coverage_arg .= ',' . $coverage if $coverage ne '';
        $ENV{'LINTIAN_COVERAGE'} = 1;
        $harness_perl_switches .= ' ' . $coverage_arg;
        $ENV{'HARNESS_PERL_SWITCHES'} = $harness_perl_switches;
        unshift(@LINTIAN_CMD, 'perl', $coverage_arg);
    }

    # Getopt::Long assigns 0 as default value if none was specified
    # (i.e. "-j").  Otherwise, $JOBS can also be -1 if "-j" was not
    # specified at all.
    if ($JOBS <= 0) {
        $JOBS = default_parallel();

        print "Doing up to $JOBS concurrent builds/tests\n" if $DEBUG;
    }

    return;
}

sub print_test_summary {
    if (!$tests_run) {
        if ($singletest) {
            print "W: No tests run, did you specify a valid test name?\n";
        } elsif ($tag) {
            print "I: No tests found for that tag.\n";
        } else {
            print
              "E: No tests run, did you specify a valid testset directory?\n";
        }
    } else {
        if (%skipped) {
            print "\nSkipped/disabled tests:\n";
            for my $suite (SUITES) {
                if (exists($skipped{$suite})) {
                    print "  [$suite]\n";
                    for my $testname (sort(keys(%{ $skipped{$suite} }))) {
                        my $reason = $skipped{$suite}{$testname};
                        print "    $testname: $reason\n";
                    }
                }
            }
        }
        if (my $number = @failed) {
            print "\nFailed tests ($number)\n";
            for my $test (@failed) {
                print "    $test\n";
            }
        }
    }
    return;
}

# Run a package test and show any diffs in the expected tags or any other
# errors detected.  Takes the description data for the test.  Returns true if
# the test passes and false if it fails.
sub test_package {
    my ($test_state, $testdata) = @_;
    my $suite = $testdata->{suite};
    my $testname = $testdata->{testname};

    if (!check_test_is_sane($TESTSET, $testdata)) {
        return $test_state->skip_test('architecture mismatch');
    }

    $test_state->progress(
        join(q{ },"Running $testdata->{testname}","$testdata->{version}... "));

    my $pkg = $testdata->{source};
    my $rundir = "$RUNDIR/$suite/$pkg";
    my $origdir = "$TESTSET/$suite/$testname";
    my $orig_version = $testdata->{version};
    my $expected = "$origdir/tags";
    my $origexp = $expected;
    my $stampfile = "$rundir/build-stamp";
    my $epochless_version = $orig_version;
    $epochless_version =~ s/^\d+://;

    if (-f "$origdir/skip") {
        my $reason = skip_reason("$origdir/skip");
        return $test_state->skip_test("(disabled) $reason");
    }

    if ($testdata->{'test-depends'}) {
        my $missing = check_test_depends($testdata);
        if ($missing) {
            return $test_state->skip_test("Missing Depends: $missing");
        }
    }

    if (not up_to_date($stampfile, $origdir)) {
        my $tmpldir = "$TESTSET/templates/$suite/";
        my $skel = $testdata->{skeleton};
        my $is_native = ($testdata->{type} eq 'native');
        my $pkgdir = "$pkg-$testdata->{version}";
        my $targetdir = "$rundir/$pkgdir";

        # Strip the Debian revision off of the name of the target
        # directory and the *.orig.tar.gz file if the package is
        # non-native.  Otherwise, it confuses dpkg-source, which then
        # fails to find the upstream tarball and builds a native
        # package.
        unless ($is_native) {
            for ($orig_version, $pkgdir, $targetdir) {
                s/-[^-]+$//;
                s/(-|^)(\d+):/$1/;
            }
        }

        print "Cleaning up and repopulating $targetdir...\n" if $DEBUG;
        runsystem_ok('rm', '-rf', $rundir);
        runsystem_ok('mkdir', '-p', $rundir);
        unless ($is_native) {
            copy_template_dir("$tmpldir/${skel}.upstream",
                "$origdir/upstream/",$targetdir);
            unlink "$targetdir/.dummy" if -e "$targetdir/.dummy";
            if (-x "$origdir/pre_upstream") {
                $test_state->progress('running pre_upstream hook... ')
                  if $VERBOSE;
                runsystem("$origdir/pre_upstream", $targetdir);
            }
            chdir_runcmd($rundir,
                ['tar', 'czf', "${pkg}_${orig_version}.orig.tar.gz", $pkgdir]);
            if (-f "$origdir/debian/debian/source/format") {
                my $format
                  = slurp_entire_file("$origdir/debian/debian/source/format");
                chomp $format;
                if ($format =~ m/^3.\d+ \(quilt\)$/) {
                    delete_dir("$targetdir/debian/");
                }
            }
        }
        copy_template_dir("$tmpldir/$skel", "$origdir/debian/", $targetdir,
            ['--exclude=debian/changelog']);

        foreach my $tfile (@{ $TEMPLATES{$suite} }) {
            unless (-e "$targetdir/$tfile") {
                fill_in_tmpl("$targetdir/$tfile", $testdata);
            }
        }

        unless ($is_native || -e "$targetdir/debian/watch") {
            my $f = "$targetdir/debian/watch";
            # Create a watch file with "content" as lintian checks for
            # non-zero file size.
            open(my $fd, '>', $f);
            print {$fd} "# Empty watch file\n";
            close($fd);
        }
        if (-x "$origdir/pre_build") {
            $test_state->progress('running pre_build hook... ') if $VERBOSE;
            runsystem("$origdir/pre_build", $targetdir);
        }
        _builder_tests($test_state, $testdata, "$rundir/$pkgdir",
            "$rundir/build.$pkg");
        touch_file($stampfile);
    } else {
        $test_state->progress('building (cached)... ');
    }

    my $file = "${pkg}_${epochless_version}_${ARCHITECTURE}.changes";
    run_lintian($test_state, $testdata, "$rundir/$file", "$rundir/tags.$pkg");

    # Run a sed-script if it exists, for tests that have slightly variable
    # output
    runsystem_ok('sed', '-ri', '-f', "$origdir/post_test", "$rundir/tags.$pkg")
      if -e "$origdir/post_test";

    if (-x "$origdir/test_calibration") {
        my $calibrated = "$rundir/expected.$pkg.calibrated";
        $test_state->progress('running test_calibration hook... ') if $VERBOSE;
        runsystem_ok(
            "$origdir/test_calibration", $expected,
            "$rundir/tags.$pkg", $calibrated
        );
        $expected = $calibrated if -e $calibrated;
    }

    return _check_result($test_state, $testdata, $expected,
        "$rundir/tags.$pkg",$origexp);
}

sub _builder_tests {
    my ($test_state, $testdata, $testdir, $log) = @_;
    $test_state->progress('building... ');
    my $res = chdir_runcmd($testdir, \@DPKG_BUILDPACKAGE_CMD, $log);
    if ($res){
        my $pkg = $testdata->{source};
        $test_state->dump_log($pkg, $log) if $DUMP_LOGS;
        fail("cd $testdir && @DPKG_BUILDPACKAGE_CMD >$log 2>&1");
    }

    return;
}

sub run_lintian {
    my ($test_state, $testdata, $file, $out) = @_;
    $test_state->progress('testing... ');
    my @options = split(' ', $testdata->{options}//'');
    unshift(@options, '--allow-root', '--no-cfg');
    unshift(@options, '--profile', $testdata->{profile});
    unshift(@options, '--no-user-dirs');
    my $pid = open(my $in, '-|');
    if ($pid) {
        my @data = <$in>;
        my $status = 0;
        eval {close($in);};
        if (my $err = $@) {
            fail("close pipe: $!") if $err->errno;
            $status = ($? >> 8) & 255;
        }
        if (defined($coverage)) {
            # Devel::Cover causes some annoying deep recursion
            # warnings.  Filter them out, but only during coverage.
            # - This is not flawless, but it gets most of them
            @data = grep {
                !m{^Deep [ ] recursion [ ] on [ ] subroutine [ ]
                    "[^"]+" [ ] at [ ] .*B/Deparse.pm [ ] line [ ]
                   \d+}xsm
            } @data;
        }
        unless ($status == 0 or $status == 1) {
            my $name = $testdata->{testname};
            #NB: lines in @data has trailing newline.
            my $msg = "$LINTIAN @options $file exited with status $status\n";
            $msg .= join(q{},map { "$name: $_" } @data);

            $test_state->test_error($msg);
        } else {
            @data = sort @data if $testdata->{sort};
            open(my $fd, '>', $out);
            print $fd $_ for @data;
            close($fd);
        }
    } else {
        open(STDERR, '>&', \*STDOUT);
        exec {$LINTIAN_CMD[0]} @LINTIAN_CMD, @options, $file
          or fail "exec failed: $!";
    }
    return 1;
}

# --- Changes file testing

# Run a test on a changes file and show any diffs in the expected tags or any
# other errors detected.  Takes the test name.  Returns true if the test
# passes and false if it fails.
sub test_changes {
    my ($test_state, $testdata) = @_;
    my $testname = $testdata->{testname};

    if (!check_test_is_sane($TESTSET, $testdata)) {
        return $test_state->skip_test('architecture mismatch');
    }

    if ($testdata->{'test-depends'}) {
        # Not sure this makes sense for .changes tests, but at least it
        # makes it consistent.
        my $missing = check_test_depends($testdata);
        if ($missing) {
            return $test_state->skip_test("Missing Depends: $missing");
        }
    }

    # Use mkdir -p to avoid a race condition where two threads tries
    # to create the same dir and then have one of them error out.
    runsystem_ok('mkdir', '-p', "$RUNDIR/changes")
      if not -d "$RUNDIR/changes";

    $test_state->progress("Running $testname $testdata->{version}... ");

    my $test = $testdata->{source};
    my $testdir = "$TESTSET/changes";
    my $file = "$testdir/$test.changes";
    # Check if we need to copy these files over.
    if (!-e $file && -e "$file.in") {
        my @files;
        $test_state->progress('building... ');
        # copy all files but "tags" and desc.  Usually this will only
        # be ".changes.in", but in rare cases we have "other files"
        # as well.
        @files = grep { !/\.(?:desc|tags)$/o } glob("$testdir/$test.*");
        runsystem('cp', '-f', @files, "$RUNDIR/changes");
        $file = "$RUNDIR/changes/${test}.changes";
        fill_in_tmpl($file, $testdata);
    }

    run_lintian($test_state, $testdata, $file, "$RUNDIR/changes/tags.$test");

    return _check_result($test_state, $testdata, "$testdir/$test.tags",
        "$RUNDIR/changes/tags.$test");
}

# generic_test_runner($dir, $ext, $test)
#
# Runs the test called $test assumed to be located in $TESTSET/$dir/$test/.
# The resulting package produced by the test is assumed to have the extension
# $ext.
#
# Returns a truth value on success, undef on test failure.  May call die/fail
# if the test is broken.
sub generic_test_runner {
    my ($test_state, $testdata, $ext) = @_;
    my $suite = $testdata->{suite};
    my $testname = $testdata->{testname};

    if (!check_test_is_sane($TESTSET, $testdata)) {
        return $test_state->skip_test('architecture mismatch');
    }

    $test_state->progress("Running $testname... ");

    my $testdir = "$TESTSET/$suite/$testname";
    my $targetdir = "$RUNDIR/$suite/$testname";
    my $stampfile = "$RUNDIR/$suite/$testname-build-stamp";

    if (-f "$testdir/skip") {
        my $reason = skip_reason("$testdir/skip");
        return $test_state->skip_test("(disabled) $reason");
    }

    if ($testdata->{'test-depends'}) {
        my $missing = check_test_depends($testdata);
        if ($missing) {
            return $test_state->skip_test("Missing Depends: $missing");
        }
    }

    if (not up_to_date($stampfile, $testdir)) {
        my $skel = $testdata->{skeleton};
        my $tmpldir = "$TESTSET/templates/$suite/";

        $test_state->progress("Cleaning up and repopulating $targetdir...\n")
          if $DEBUG;
        runsystem_ok('rm', '-rf', $targetdir);
        runsystem_ok('mkdir', '-p', $targetdir);
        runsystem('cp', '-rp', $testdir, $targetdir);

        copy_template_dir("$tmpldir/$skel", "$testdir/", $targetdir,
            ['--exclude=changelog'], ['--exclude=desc']);

        foreach my $tfile (@{ $TEMPLATES{$suite} }) {
            unless (-e "$targetdir/$tfile") {
                fill_in_tmpl("$targetdir/$tfile", $testdata);
            }
        }

        $test_state->progress('building... ');
        my $res= chdir_runcmd($targetdir, ['fakeroot', 'make'],
            "../build.$testname");
        if ($res) {
            $test_state->dump_log($testname, "$RUNDIR/build.$testname")
              if $DUMP_LOGS;
            $test_state->test_error(
                join(q{ },
                    "cd $targetdir &&",
                    "fakeroot make >../build.$testname 2>&1 failed"));
        }
        touch_file($stampfile);
    } else {
        $test_state->progress('building (cached)... ');
    }
    my @matches = glob("$targetdir/*.$ext");
    my $file = shift @matches;
    unless ($file && -e $file) {
        $file //= '<N/A>';
        $test_state->test_error(
            join(q{ },
                "$testname did not produce any file matching",
                "\"$targetdir/*.$ext\" ($file)"));
    }
    $test_state->test_error(
        join(q{ },
            "$testname produced more than one file",
            "matching \"$targetdir/*.$ext\""))if @matches;

    run_lintian($test_state, $testdata, $file,"$RUNDIR/$suite/tags.$testname");
    return _check_result($test_state, $testdata, "$testdir/tags",
        "$RUNDIR/$suite/tags.$testname");
}

sub find_tests_to_run {
    my @test_suite_info = (
        ['changes', "$TESTSET/changes/*.desc"],
        ['debs', "$TESTSET/debs/*/desc",],
        ['source', "$TESTSET/source/*/desc",],
        ['tests', "$TESTSET/tests/*/desc"]);

    foreach my $tsi (@test_suite_info) {
        my ($suite, $globstr) = @{$tsi};
        my @tests;
        if ($singletest) {
            my $desc_file = $globstr;

            $desc_file =~ s/\Q*\E/$singletest/;

            if (-f $desc_file) {
                push(@tests, read_test_desc($desc_file));
            } elsif (-f "$LINTIAN_ROOT/checks/$singletest.desc"
                || $singletest eq 'legacy') {
                my $check_glob = $globstr;
                $check_glob =~ s/\Q*\E/${singletest}-*/;
                @tests = map { read_test_desc($_) }glob($check_glob);
            }
        } elsif ($tag) {
            @tests = find_tests_for_tag($tag, $globstr);
        } elsif ($suites{$suite}) {
            unless (-d "$TESTSET/$suite/") {
                fail("cannot find $TESTSET/$suite: $!");
            }
            @tests = map { read_test_desc($_) } glob($globstr);
        }
        next if not @tests;
        # Sort the tests relative to others in their own suite.
        @tests = sort {
                 $a->{sequence} <=> $b->{sequence}
              || $a->{testname} cmp $b->{testname}
        } @tests;
        for my $test (@tests) {
            $test->{'suite'} = $suite;
        }
        push(@TESTS, @tests);
    }
    return;
}

sub run_prove_tests {
    my @do_run;
    if ($singletest) {
        my $script = "$TESTSET/scripts/$singletest.t";
        if (-f $script) {
            @do_run = ($script);
        } elsif (-d "$TESTSET/scripts/$singletest") {
            @do_run = ("$TESTSET/scripts/$singletest");
        }
    } elsif ($suites{'scripts'}) {
        unless (-d "$TESTSET/scripts") {
            fail("cannot find $TESTSET/scripts: $!");
        }
        @do_run = ("$TESTSET/scripts");
    }
    if (@do_run) {
        my @prove_cmd= ('prove', '-j', $JOBS, '-r', '-I', "$LINTIAN_ROOT/lib");

        print "Test scripts:\n";
        if (system(@prove_cmd, @do_run) != 0) {
            exit 1 unless $run_all_tests;
            $status = 1;
        }
        $tests_run++;

        print "\n";
    }
    return;
}

sub create_child {
    my ($loop, $tests, $child_no) = @_;
    my ($child_in_ch, $child_out_ch, $routine);
    my $start_test = shift(@{$tests});

    # If there are no more tests, don't spawn a routine for it
    # Usually happens when only running a single thread.
    return if not defined($start_test);

    $child_in_ch = IO::Async::Channel->new;
    $child_out_ch  = IO::Async::Channel->new;

    $routine = IO::Async::Routine->new(
        model => 'fork',
        channels_in  => [$child_in_ch],
        channels_out => [$child_out_ch],

        code => sub {
            while (my $test_data = $child_in_ch->recv) {
                my $state = Test::State->new($test_data, $child_out_ch);
                my $suite = $test_data->{'suite'};

                eval {
                    if ($suite eq 'changes') {
                        test_changes($state, $test_data);
                    } elsif ($suite eq 'tests') {
                        test_package($state, $test_data);
                    } elsif ($suite eq 'debs' or $suite eq 'source') {
                        my $ext = 'deb';
                        $ext = 'dsc' if $suite eq 'source';
                        generic_test_runner($state, $test_data, $ext);
                    } else {
                        $state->test_error(
                            "Don't know how to handle suite:$suite");
                    }
                };
                if (my $err = $@) {
                    $state->test_error($err);
                }

                #                my $testname = $ref->{'testname'};
                #                print STDERR "$child_no: $suite::$testname\n";
                # Can only send references
                #                $child_out_ch->send( $ref );
            }
            return;
        },

        on_finish => sub {
            $ACTIVE_JOBS--;
            if ($ACTIVE_JOBS < 1) {
                print STDERR "Stopping loop, no more active workers\n";
                $loop->stop;
            }
            return;
        },
    );

    $loop->add($routine);
    $ACTIVE_JOBS++;
    $child_in_ch->send($start_test);

    $child_out_ch->configure(
        'on_recv' => sub {
            my (undef, $from_child) = @_;
            handle_msg_from_child($child_in_ch, $tests, @{$from_child});
            return;
        },
    );
    return 1;
}

sub handle_msg_from_child {
    my ($child_in_ch, $test_queue, $msg_type, $test_metadata, @payload) = @_;
    my $suite = $test_metadata->{'suite'};
    my $testname = $test_metadata->{'testname'};

    print "${msg_type} -- ${suite}::${testname} [@payload]\n";

    if (   $msg_type eq 'pass'
        or $msg_type eq 'skip'
        or $msg_type eq 'fail'
        or $msg_type eq 'error'
        or $msg_type eq 'pass-todo') {
        my $is_problem = ($msg_type eq 'fail' or $msg_type eq 'error');
        my $test;
        if ($is_problem and not $run_all_tests) {
            # Empty the queue, so no further jobs are started
            $#{$test_queue} = -1;
        }
        $test = shift(@{$test_queue});

        $tests_run++;
        if (defined($test)) {
            $child_in_ch->send($test);
        } else {
            $child_in_ch->close;
        }
    }
    return;
}

sub _check_result {
    my ($test_state, $testdata, $expected, $actual, $origexp) = @_;
    # Compare the output to the expected tags.
    my $testok = runsystem_ok('cmp', '-s', $expected, $actual);

    if (not $testok) {
        if ($testdata->{'todo'} eq 'yes') {
            return $test_state->pass_todo_test('failed but marked as TODO');
        } else {
            return $test_state->fail_test('output differs!',
                ['diff', $expected, $actual]);
        }
    }
    return $test_state->pass_test unless $testdata;

    # Check the output for invalid lines.  Also verify that all Test-For tags
    # are seen and all Test-Against tags are not.  Skip this part of the test
    # if neither Test-For nor Test-Against are set and Sort is also not set,
    # since in that case we probably have non-standard output.
    my %test_for = map { $_ => 1 } split(' ', $testdata->{'test-for'});
    my %test_against = map { $_ => 1 } split(' ', $testdata->{'test-against'});
    if (    not %test_for
        and not %test_against
        and $testdata->{'output-format'} ne 'EWI') {
        if ($testdata->{'todo'} eq 'yes') {
            return $test_state->fail_test('marked as TODO but succeeded');
        } else {
            return $test_state->pass_test;
        }
    } else {
        my $okay = 1;
        my @msgs;
        open(my $etags, '<', $actual);
        while (<$etags>) {
            next if m/^N: /;
            # Some of the traversal tests creates packages that are
            # skipped; accept that in the output
            next if m/tainted/o && m/skipping/o;
            # Looks for "$code: $package[ $type]: $tag"
            if (not /^.: \S+(?: (?:changes|source|udeb))?: (\S+)/o) {
                chomp;
                push(@msgs, "Invalid line: $_");
                $okay = 0;
                next;
            }
            my $tag = $1;
            if ($test_against{$tag}) {
                push(@msgs, "Tag $tag seen but listed in Test-Against");
                $okay = 0;
                # Warn only once about each "test-against" tag
                delete $test_against{$tag};
            }
            delete $test_for{$tag};
        }
        close($etags);
        if (%test_for) {
            if ($origexp && $origexp ne $expected) {
                # Test has been calibrated, check if some of the
                # "Test-For" has been calibrated out.  (Happens with
                # binaries-hardening on some architectures).
                open(my $oe, '<', $expected);
                my %cp_tf = %test_for;
                while (<$oe>) {
                    next if m/^N: /;
                    # Some of the traversal tests creates packages that are
                    # skipped; accept that in the output
                    next if m/tainted/o && m/skipping/o;
                    if (not /^.: \S+(?: (?:changes|source|udeb))?: (\S+)/o) {
                        chomp;
                        push(@msgs, "Invalid line: $_");
                        $okay = 0;
                        next;
                    }
                    delete $cp_tf{$1};
                }
                close($oe);
                # Remove tags that has been calibrated out.
                foreach my $tag (keys %cp_tf) {
                    delete $test_for{$tag};
                }
            }
            for my $tag (sort keys %test_for) {
                push(@msgs, "Tag $tag listed in Test-For but not found");
                $okay = 0;
            }
        }
        if ($okay) {
            if ($testdata->{'todo'} eq 'yes') {
                return $test_state->fail_test('marked as TODO but succeeded');
            }
            return $test_state->pass_test;
        } elsif ($testdata->{'todo'} eq 'yes') {
            return $test_state->pass_todo_test(join("\n", @msgs));
        } else {
            return $test_state->fail_test(join("\n", @msgs));
        }
    }
    confess("Assertion: This should be unreachable\n");
}

sub handle_dump_log{
    my ($prefix, $logf) = @_;
    no autodie qw(open);
    if (open(my $log, '<', $logf)){
        print "${prefix}---- START BUILD LOG\n";
        print "${prefix}$_" while (<$log>);
        print "${prefix}---- END BUILD LOG\n";
        close($log);
    } else {
        print "!!! Could not dump $logf: $!";
    }
    return 1;
}

sub check_test_is_sane {
    my ($dir, $data) = @_;

    unless ($data->{testname} && exists $data->{version}) {
        fail('Name or Version missing');
    }

    $data->{source} ||= $data->{testname};
    $data->{type} ||= 'native';
    $data->{date} ||= $DATE;
    $data->{distribution} ||= 'unstable';
    $data->{description} ||= 'No Description Available';
    $data->{author}||= 'Debian Lintian Maintainers <lintian-maint@debian.org>';
    $data->{architecture} ||= 'all';
    $data->{profile} ||= 'debian';
    $data->{section} ||= 'devel';
    $data->{'standards_version'} ||= $STANDARDS_VERSION;
    $data->{sort} ||= 'yes';
    $data->{sort} = parse_boolean($data->{sort});
    $data->{'output-format'} ||= 'EWI';

    $data->{'test-for'} ||= '';
    $data->{'test-against'} ||= '';

    $data->{skeleton} ||= 'skel';
    $data->{options} ||= '-I -E';
    $data->{todo} ||= 'no';
    $data->{'test-depends'} //= '';

    # Unwrap the options in case we used continuation lines.
    $data->{options} =~ s/\n//g;

    # Allow options relative to the root of the test directory.
    $data->{options} =~ s/TESTSET/$dir/g;

    my @architectures = qw(all any);
    push @architectures, $ARCHITECTURE;

    # Check for arch-specific tests
    # FIXME: deal with wildcards correctly.
    if (none { $data->{architecture} =~ m/\b$_\b/ } @architectures) {
        return 0;
    }

    return 1;
}

sub usage {
    my ($exitcode) = @_;
    print <<"END";
Usage: $0 [options] [-j [<jobs>]] <testset-directory> <testing-directory> [<test-selection>]

    --coverage  Run Lintian under Devel::Cover (Warning: painfully slow)
    -d          Display additional debugging information
    --dump-logs Print build log to STDOUT, if a build fails.
    -j [<jobs>] Run up to <jobs> jobs in parallel.
                If -j is passed without specifying <jobs>, the number
                of jobs started is <nproc>+1.
    -k          Do not stop after one failed test
    -v          Be more verbose
    --help, -h  Print this help and exit

    The optional 3rd parameter causes runtests to only run tests that match
    the particular selection.  This parameter can be one of:

      * <testname>
        - Run the test(s) named exactly <testname>.  Note that each suite
          can reuse the name of the test, so this may run more than one
          test.
      * <dir-in-scripts-suite>
        - Run all "scripts"-tests within a given dir.  E.g. "01-critic"
          will run all tests in "t/scripts/01-critic/".
      * <check-name>
        - Run all tests related to the given check.  This is based on the
          name of the test (i.e. it must start with "<check-name>-").
      * legacy
        - Run all "legacy" tests (i.e. t/tests/legacy-*), which were
         imported from the old test suite.
      * suite:<suite>[,<suite...>]
        - Run all tests in the listed suites.
      * tag:<tag-name>
        - Run any test that lists <tag-name> in "Test-For" or
          "Test-Against".


Test artifacts are cached in <testing-directory> and will be reused if
deemed "up-to-date".  This cache can greatly reduce the run time of the
test suite.
END
    exit($exitcode//2);
}

package Test::State;

sub new {
    my ($class, $metadata, $output) = @_;
    my $self = {
        '_output' => $output,
        '_test_metadata' => $metadata,
    };
    return bless($self, $class);
}

sub progress {
    my ($self, $msg) = @_;
    return $self->_send('progress', $msg);
}

sub skip_test {
    my ($self, $reason) = @_;
    return $self->_send('skip', $reason);
}

sub pass_test {
    my ($self) = @_;
    return $self->_send('pass');
}

sub pass_todo_test {
    my ($self, $msg) = @_;
    return $self->_send('pass-todo', $msg);
}

sub test_error {
    my ($self, $msg) = @_;
    #confess("ERROR $msg\n");
    return $self->_send('error', $msg);
}

sub dump_log {
    my ($self, $pkg, $logfile) = @_;
    return $self->_send('dump-file', $logfile, "$pkg: ");
}

sub fail_test {
    my ($self, $msg) = @_;
    return $self->_send('fail', $msg);
}

sub _send {
    my ($self, $msg_type, @msg) = @_;
    $self->{'_output'}->send([$msg_type, $self->{'_test_metadata'}, @msg]);
    return;
}

# Local Variables:
# indent-tabs-mode: nil
# cperl-indent-level: 4
# End:
# vim: syntax=perl sw=4 sts=4 sr et
